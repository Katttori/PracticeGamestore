// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeGamestore.DataAccess;

#nullable disable

namespace PracticeGamestore.DataAccess.Migrations
{
    [DbContext(typeof(GamestoreDbContext))]
    [Migration("20250623113727_FixUserMigration")]
    partial class FixUserMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("blacklists", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("CountryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int")
                        .HasColumnName("age_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Picture")
                        .HasMaxLength(1048576)
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("picture");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.HasKey("GameId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("game_order", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f7e180c-bbd7-4e19-bb82-b105b3211aa0"),
                            Description = "Strategic thinking and planning games",
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("491292b4-91d9-47a8-a828-8b176b3cb7ca"),
                            Description = "Role-playing games",
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d"),
                            Description = "Sports simulation and arcade games",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("d29f6def-6459-4ce2-b781-b4e63b2ed66b"),
                            Description = "Fast-paced action games",
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("d31de950-34f1-4a7d-b5e8-2d0c64c1d366"),
                            Description = "Brain teasers and skill-based games",
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("4f2189d9-1bf0-47ca-b966-80bc24fdeb1a"),
                            Description = "Real-time strategy",
                            Name = "RTS",
                            ParentId = new Guid("2f7e180c-bbd7-4e19-bb82-b105b3211aa0")
                        },
                        new
                        {
                            Id = new Guid("5d949f2b-76bb-4f0e-8699-f21e3a2974c9"),
                            Description = "Turn-based strategy",
                            Name = "TBS",
                            ParentId = new Guid("2f7e180c-bbd7-4e19-bb82-b105b3211aa0")
                        },
                        new
                        {
                            Id = new Guid("13e6eaa3-5fa4-4049-b671-756962d3ae82"),
                            Description = "Racing games",
                            Name = "Races",
                            ParentId = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d")
                        },
                        new
                        {
                            Id = new Guid("11f2efd1-3f96-4d55-bb11-4ce1af8515f7"),
                            Description = "Rally racing",
                            Name = "Rally",
                            ParentId = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d")
                        },
                        new
                        {
                            Id = new Guid("8386d754-6da2-4c4e-9de2-f61c513b2709"),
                            Description = "Arcade sports",
                            Name = "Arcade",
                            ParentId = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d")
                        },
                        new
                        {
                            Id = new Guid("8ea21de1-537c-419d-848f-5fd2762130b7"),
                            Description = "Formula racing",
                            Name = "Formula",
                            ParentId = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d")
                        },
                        new
                        {
                            Id = new Guid("42cbf990-2b2e-422c-bcb3-c7861dae2318"),
                            Description = "Off-road racing",
                            Name = "Off-road",
                            ParentId = new Guid("256dcdc1-4f09-4018-b34c-b64e74a51a0d")
                        },
                        new
                        {
                            Id = new Guid("039a2799-f506-4fce-ad9d-2e2bf803eda8"),
                            Description = "First-person shooter",
                            Name = "FPS",
                            ParentId = new Guid("d29f6def-6459-4ce2-b781-b4e63b2ed66b")
                        },
                        new
                        {
                            Id = new Guid("7b953856-1bb3-4461-b50d-48c39e1ee3cc"),
                            Description = "Third-person shooter",
                            Name = "TPS",
                            ParentId = new Guid("d29f6def-6459-4ce2-b781-b4e63b2ed66b")
                        },
                        new
                        {
                            Id = new Guid("24fbc996-1cb9-4ac3-bb83-efea42fea6d8"),
                            Description = "Action adventure games",
                            Name = "Adventure",
                            ParentId = new Guid("d29f6def-6459-4ce2-b781-b4e63b2ed66b")
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ee3c123-bc53-4646-ab91-56f8e7be6ef5"),
                            Description = "",
                            Name = "Android"
                        },
                        new
                        {
                            Id = new Guid("f8d83984-e0b9-45d6-8400-dcaf6f4f7310"),
                            Description = "",
                            Name = "IOS"
                        },
                        new
                        {
                            Id = new Guid("2ff14fed-6d8a-48cd-ba91-7f7fddd64eae"),
                            Description = "",
                            Name = "Windows"
                        },
                        new
                        {
                            Id = new Guid("7aad9b48-00b1-4be2-8c44-464ac711536c"),
                            Description = "",
                            Name = "VR"
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("page_url");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PageUrl")
                        .IsUnique();

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany("Blacklists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("Files")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameOrders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Order", "Order")
                        .WithMany("GameOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("Blacklists");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("GameGenres");

                    b.Navigation("GameOrders");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("GameOrders");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
