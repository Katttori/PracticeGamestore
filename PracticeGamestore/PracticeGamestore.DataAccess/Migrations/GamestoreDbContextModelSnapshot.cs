// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeGamestore.DataAccess;

#nullable disable

namespace PracticeGamestore.DataAccess.Migrations
{
    [DbContext(typeof(GamestoreDbContext))]
    partial class GamestoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("blacklists", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("CountryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int")
                        .HasColumnName("age_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("picture");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.HasKey("GameId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("game_order", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ac41f1b-5a4b-4813-95bf-72b1fb062538"),
                            Description = "Strategic thinking and planning games",
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("cd29affd-5f3e-4a4f-9987-037ca1ee562c"),
                            Description = "Role-playing games",
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6"),
                            Description = "Sports simulation and arcade games",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("1ae17760-ea12-4c0e-bd45-2e4e286174a7"),
                            Description = "Fast-paced action games",
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("ab5a42fe-f351-4c1b-b961-01163b39d5b4"),
                            Description = "Brain teasers and skill-based games",
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("71969d00-15ad-4a22-885f-6b23fa7751ca"),
                            Description = "Real-time strategy",
                            Name = "RTS",
                            ParentId = new Guid("2ac41f1b-5a4b-4813-95bf-72b1fb062538")
                        },
                        new
                        {
                            Id = new Guid("afe29366-1fbd-4785-bca3-b8302420891f"),
                            Description = "Turn-based strategy",
                            Name = "TBS",
                            ParentId = new Guid("2ac41f1b-5a4b-4813-95bf-72b1fb062538")
                        },
                        new
                        {
                            Id = new Guid("c6a30083-da8a-4f8e-b668-2f5fbaa3ac03"),
                            Description = "Racing games",
                            Name = "Races",
                            ParentId = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6")
                        },
                        new
                        {
                            Id = new Guid("fc6127d0-6258-4319-b86d-5f00aec11b64"),
                            Description = "Rally racing",
                            Name = "Rally",
                            ParentId = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6")
                        },
                        new
                        {
                            Id = new Guid("eb4f7536-0ac6-42ad-a1dc-fe97b835b4b7"),
                            Description = "Arcade sports",
                            Name = "Arcade",
                            ParentId = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6")
                        },
                        new
                        {
                            Id = new Guid("1540f288-b0e3-49e7-b8f3-589257baf438"),
                            Description = "Formula racing",
                            Name = "Formula",
                            ParentId = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6")
                        },
                        new
                        {
                            Id = new Guid("d1026bb9-dd6f-4d0e-8b19-1a239995155c"),
                            Description = "Off-road racing",
                            Name = "Off-road",
                            ParentId = new Guid("2ba56be1-6916-4de6-b28d-c4235a0928a6")
                        },
                        new
                        {
                            Id = new Guid("d6ee7e85-2532-484c-983e-7cf881720362"),
                            Description = "First-person shooter",
                            Name = "FPS",
                            ParentId = new Guid("1ae17760-ea12-4c0e-bd45-2e4e286174a7")
                        },
                        new
                        {
                            Id = new Guid("e56e938c-99b4-40c2-8d7d-42fb37d3b2f3"),
                            Description = "Third-person shooter",
                            Name = "TPS",
                            ParentId = new Guid("1ae17760-ea12-4c0e-bd45-2e4e286174a7")
                        },
                        new
                        {
                            Id = new Guid("a238c4af-b55e-4995-a303-ff6b25705888"),
                            Description = "Action adventure games",
                            Name = "Adventure",
                            ParentId = new Guid("1ae17760-ea12-4c0e-bd45-2e4e286174a7")
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e22a4f4e-d17a-4fcb-b184-17dace22df99"),
                            Description = "",
                            Name = "Android"
                        },
                        new
                        {
                            Id = new Guid("9d4d8712-e1cc-4e04-9fce-b7db2f8fb231"),
                            Description = "",
                            Name = "IOS"
                        },
                        new
                        {
                            Id = new Guid("0a5a71af-abc0-4789-811d-65479eeffabd"),
                            Description = "",
                            Name = "Windows"
                        },
                        new
                        {
                            Id = new Guid("2ee223a9-3b60-424a-bc53-29c19f5ab446"),
                            Description = "",
                            Name = "VR"
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("page_url");

                    b.HasKey("Id");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany("Blacklists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("Files")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameOrders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Order", "Order")
                        .WithMany("GameOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("Blacklists");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("GameGenres");

                    b.Navigation("GameOrders");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("GameOrders");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
