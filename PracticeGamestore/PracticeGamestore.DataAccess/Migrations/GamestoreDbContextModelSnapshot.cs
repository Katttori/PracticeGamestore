// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeGamestore.DataAccess;

#nullable disable

namespace PracticeGamestore.DataAccess.Migrations
{
    [DbContext(typeof(GamestoreDbContext))]
    partial class GamestoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("blacklists", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("CountryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int")
                        .HasColumnName("age_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Picture")
                        .HasMaxLength(1048576)
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("picture");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.HasKey("GameId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("game_order", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2cea01f-49e4-4180-b79f-4ad086f27e93"),
                            Description = "Strategic thinking and planning games",
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("4b02b3a6-32cc-43a2-a836-b84c3558ab2c"),
                            Description = "Role-playing games",
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24"),
                            Description = "Sports simulation and arcade games",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("0b2c51e7-5787-4926-b9e9-0f1a3fa78dac"),
                            Description = "Fast-paced action games",
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("f618619c-c34c-408f-9c3b-23f086b55584"),
                            Description = "Brain teasers and skill-based games",
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("0b98f123-af8b-4c48-b70b-6febabc50dd6"),
                            Description = "Real-time strategy",
                            Name = "RTS",
                            ParentId = new Guid("f2cea01f-49e4-4180-b79f-4ad086f27e93")
                        },
                        new
                        {
                            Id = new Guid("b6c4f700-f27f-4ddf-92b0-937d59ae78f4"),
                            Description = "Turn-based strategy",
                            Name = "TBS",
                            ParentId = new Guid("f2cea01f-49e4-4180-b79f-4ad086f27e93")
                        },
                        new
                        {
                            Id = new Guid("57f8063d-8e3e-4416-8038-7714cea05406"),
                            Description = "Racing games",
                            Name = "Races",
                            ParentId = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24")
                        },
                        new
                        {
                            Id = new Guid("7ddaea09-ded2-4868-86b8-f2e7ec4b5c57"),
                            Description = "Rally racing",
                            Name = "Rally",
                            ParentId = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24")
                        },
                        new
                        {
                            Id = new Guid("7c4d9b95-6c2a-42e4-a063-d6e00e3bfa77"),
                            Description = "Arcade sports",
                            Name = "Arcade",
                            ParentId = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24")
                        },
                        new
                        {
                            Id = new Guid("a62ba71b-77c8-4dc0-b2ef-df9ae51cf6ee"),
                            Description = "Formula racing",
                            Name = "Formula",
                            ParentId = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24")
                        },
                        new
                        {
                            Id = new Guid("85e9dc5f-cf67-4b2b-a096-b680b387e1e8"),
                            Description = "Off-road racing",
                            Name = "Off-road",
                            ParentId = new Guid("9f9005ed-99ba-43ad-aa16-037ba9b5fc24")
                        },
                        new
                        {
                            Id = new Guid("646b4c3a-ebea-4a21-b364-b2af2da6f676"),
                            Description = "First-person shooter",
                            Name = "FPS",
                            ParentId = new Guid("0b2c51e7-5787-4926-b9e9-0f1a3fa78dac")
                        },
                        new
                        {
                            Id = new Guid("6347e9e9-aa6b-4b01-accd-f7aaf24b6674"),
                            Description = "Third-person shooter",
                            Name = "TPS",
                            ParentId = new Guid("0b2c51e7-5787-4926-b9e9-0f1a3fa78dac")
                        },
                        new
                        {
                            Id = new Guid("21b27885-c47e-47ab-8db4-aeec05e7e78d"),
                            Description = "Action adventure games",
                            Name = "Adventure",
                            ParentId = new Guid("0b2c51e7-5787-4926-b9e9-0f1a3fa78dac")
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fdd41ca-fb79-4368-8ddb-9f0778a9d6ec"),
                            Description = "",
                            Name = "Android"
                        },
                        new
                        {
                            Id = new Guid("57e45c16-83ae-4fb1-86eb-a2e743488e27"),
                            Description = "",
                            Name = "IOS"
                        },
                        new
                        {
                            Id = new Guid("ea5331a5-ced8-49b6-8b8a-56d0c5936054"),
                            Description = "",
                            Name = "Windows"
                        },
                        new
                        {
                            Id = new Guid("881567b8-aed0-4abd-bcaa-601c16e76418"),
                            Description = "",
                            Name = "VR"
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("page_url");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PageUrl")
                        .IsUnique();

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany("Blacklists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("Files")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameOrders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Order", "Order")
                        .WithMany("GameOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("Blacklists");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("GameGenres");

                    b.Navigation("GameOrders");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("GameOrders");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
