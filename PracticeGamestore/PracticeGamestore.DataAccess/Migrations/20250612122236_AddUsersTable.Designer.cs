// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracticeGamestore.DataAccess;

#nullable disable

namespace PracticeGamestore.DataAccess.Migrations
{
    [DbContext(typeof(GamestoreDbContext))]
    [Migration("20250612122236_AddUsersTable")]
    partial class AddUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("blacklists", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("CountryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int")
                        .HasColumnName("age_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("picture");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("release_date");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_id");

                    b.HasKey("GameId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("game_order", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("platform_id");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("game_platform", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a025e51c-a22f-413d-9da4-da31d2a930b5"),
                            Description = "Strategic thinking and planning games",
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("26469173-62e3-4613-979f-6c262ae61c7f"),
                            Description = "Role-playing games",
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3"),
                            Description = "Sports simulation and arcade games",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("8bd9e184-4bc2-4e8d-9f77-e1218ff1e30b"),
                            Description = "Fast-paced action games",
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("b249ac00-9a17-43c4-a66e-c89e8f51c794"),
                            Description = "Brain teasers and skill-based games",
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("9fb1d009-af4b-46fb-b5fe-1cce27db7317"),
                            Description = "Real-time strategy",
                            Name = "RTS",
                            ParentId = new Guid("a025e51c-a22f-413d-9da4-da31d2a930b5")
                        },
                        new
                        {
                            Id = new Guid("635b44c9-35ad-4ef4-8111-cc66fbedbebd"),
                            Description = "Turn-based strategy",
                            Name = "TBS",
                            ParentId = new Guid("a025e51c-a22f-413d-9da4-da31d2a930b5")
                        },
                        new
                        {
                            Id = new Guid("5d3b2a63-05a8-4052-9cda-c7489ccda0f6"),
                            Description = "Racing games",
                            Name = "Races",
                            ParentId = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3")
                        },
                        new
                        {
                            Id = new Guid("37dd51b8-7de8-4318-b7e0-5b4ec5c51c64"),
                            Description = "Rally racing",
                            Name = "Rally",
                            ParentId = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3")
                        },
                        new
                        {
                            Id = new Guid("d4d79430-70f2-4bf3-b887-6e3f2bac1319"),
                            Description = "Arcade sports",
                            Name = "Arcade",
                            ParentId = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3")
                        },
                        new
                        {
                            Id = new Guid("516196c9-5346-4113-8b4b-8ddc8b06d783"),
                            Description = "Formula racing",
                            Name = "Formula",
                            ParentId = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3")
                        },
                        new
                        {
                            Id = new Guid("04ed175d-20d6-47c4-91b0-691bd055c7b3"),
                            Description = "Off-road racing",
                            Name = "Off-road",
                            ParentId = new Guid("c5481ef9-2ff5-4c54-9be4-bbda1b015cb3")
                        },
                        new
                        {
                            Id = new Guid("17acd49b-a60e-411f-92b9-868a2aeff43a"),
                            Description = "First-person shooter",
                            Name = "FPS",
                            ParentId = new Guid("8bd9e184-4bc2-4e8d-9f77-e1218ff1e30b")
                        },
                        new
                        {
                            Id = new Guid("ff18cbc5-38a1-4a9d-b233-f6e4e56caacf"),
                            Description = "Third-person shooter",
                            Name = "TPS",
                            ParentId = new Guid("8bd9e184-4bc2-4e8d-9f77-e1218ff1e30b")
                        },
                        new
                        {
                            Id = new Guid("72925e1a-776e-43e4-b109-d3c42f988009"),
                            Description = "Action adventure games",
                            Name = "Adventure",
                            ParentId = new Guid("8bd9e184-4bc2-4e8d-9f77-e1218ff1e30b")
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("platforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bf5630a-0416-4733-9d95-34a5c0afc8ec"),
                            Description = "",
                            Name = "Android"
                        },
                        new
                        {
                            Id = new Guid("8be1c775-f13f-4d02-a57c-6786661d19ee"),
                            Description = "",
                            Name = "IOS"
                        },
                        new
                        {
                            Id = new Guid("619faf9d-aefb-466b-8df2-b0b05164a018"),
                            Description = "",
                            Name = "Windows"
                        },
                        new
                        {
                            Id = new Guid("8e79ec69-43d2-4504-a0f2-3f6bc80b9df0"),
                            Description = "",
                            Name = "VR"
                        });
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("page_url");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PageUrl")
                        .IsUnique();

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("User")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Blacklist", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany("Blacklists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.File", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("Files")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameGenre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GameOrder", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GameOrders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Order", "Order")
                        .WithMany("GameOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.GamePlatform", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PracticeGamestore.DataAccess.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Genre", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.User", b =>
                {
                    b.HasOne("PracticeGamestore.DataAccess.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Country", b =>
                {
                    b.Navigation("Blacklists");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Game", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("GameGenres");

                    b.Navigation("GameOrders");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Genre", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("GameOrders");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("PracticeGamestore.DataAccess.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
